// Generated by the Freon Language Generator.
// Generated by Freon LanguageTemplate
import {
    FreLanguage,
    FreLanguageModel,
    FreLanguageModelUnit,
    FreLanguageProperty,
    FreLanguageConcept,
    FreLanguageInterface,
    FreNodeReference,
} from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal";
import { CalculatorModelStdlib } from "../../stdlib/gen/CalculatorModelStdlib";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "CalculatorModel";
    FreLanguage.getInstance().id = "";
    FreLanguage.getInstance().addModel(describeCalculatorModel());
    FreLanguage.getInstance().addUnit(describeCalculator());
    FreLanguage.getInstance().addConcept(describeInputField());
    FreLanguage.getInstance().addConcept(describeOutputField());
    FreLanguage.getInstance().addConcept(describeInputFieldReference());
    FreLanguage.getInstance().addConcept(describeCalcExpression());
    FreLanguage.getInstance().addConcept(describeLiteralExpression());
    FreLanguage.getInstance().addConcept(describeNumberLiteralExpression());
    FreLanguage.getInstance().addConcept(describeBinaryExpression());
    FreLanguage.getInstance().addConcept(describeMultiplyExpression());
    FreLanguage.getInstance().addConcept(describePlusExpression());
    FreLanguage.getInstance().addConcept(describeMinusExpression());
    FreLanguage.getInstance().addConcept(describeDivideExpression());
    FreLanguage.getInstance().addInterface(describeINamedConcept());
    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
    FreLanguage.getInstance().stdLib = CalculatorModelStdlib.getInstance();
}

function describeCalculatorModel(): FreLanguageModel {
    const model: FreLanguageModel = {
        typeName: "CalculatorModel",
        id: "-default-id-CalculatorModel",
        key: "-default-key-CalculatorModel",
        isNamespace: true,
        language: "-default-key-calculator",
        constructor: (id?: string) => {
            return new MyLanguage.CalculatorModel(id);
        },
        creator: (data: Partial<MyLanguage.CalculatorModel>) => {
            return MyLanguage.CalculatorModel.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
    };
    model.properties.set("name", {
        name: "name",
        id: "-default-id-CalculatorModel-name",
        key: "-default-key-CalculatorModel-name",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "primitive",
    });
    model.properties.set("calc", {
        name: "calc",
        id: "-default-id-CalculatorModel-calc",
        key: "-default-key-CalculatorModel-calc",
        type: "Calculator",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return model;
}

function describeCalculator(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "Calculator",
        id: "-default-id-Calculator",
        key: "-default-key-Calculator",
        isNamedElement: true,
        language: "-default-key-calculator",
        fileExtension: "cal",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.Calculator(id);
        },
        creator: (data: Partial<MyLanguage.Calculator>) => {
            return MyLanguage.Calculator.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "Calculator",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-default-id-Calculator-name",
        key: "-default-key-Calculator-name",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "primitive",
    });
    modelunit.properties.set("inputFields", {
        name: "inputFields",
        id: "-default-id-Calculator-inputFields",
        key: "-default-key-Calculator-inputFields",
        type: "InputField",
        isList: true,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });
    modelunit.properties.set("outputFields", {
        name: "outputFields",
        id: "-default-id-Calculator-outputFields",
        key: "-default-key-Calculator-outputFields",
        type: "OutputField",
        isList: true,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return modelunit;
}

function describeInputField(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InputField",
        id: "-default-id-InputField",
        key: "-default-key-InputField",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: true,
        trigger: "InputField",
        constructor: (id?: string) => {
            return new MyLanguage.InputField(id);
        },
        creator: (data: Partial<MyLanguage.InputField>) => {
            return MyLanguage.InputField.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-default-id-INamedConcept-name",
        key: "-default-key-INamedConcept-name",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "primitive",
    });

    return concept;
}

function describeOutputField(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "OutputField",
        id: "-default-id-OutputField",
        key: "-default-key-OutputField",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "OutputField",
        constructor: (id?: string) => {
            return new MyLanguage.OutputField(id);
        },
        creator: (data: Partial<MyLanguage.OutputField>) => {
            return MyLanguage.OutputField.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    concept.properties.set("expression", {
        name: "expression",
        id: "-default-id-OutputField-expression",
        key: "-default-key-OutputField-expression",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return concept;
}

function describeInputFieldReference(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InputFieldReference",
        id: "-default-id-InputFieldReference",
        key: "-default-key-InputFieldReference",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "InputFieldReference",
        constructor: (id?: string) => {
            return new MyLanguage.InputFieldReference(id);
        },
        creator: (data: Partial<MyLanguage.InputFieldReference>) => {
            return MyLanguage.InputFieldReference.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "CalcExpression",
        subConceptNames: [],
    };

    concept.properties.set("field", {
        name: "field",
        id: "-default-id-InputFieldReference-field",
        key: "-default-key-InputFieldReference-field",
        type: "InputField",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "reference",
    });
    return concept;
}

function describeCalcExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "CalcExpression",
        id: "-default-id-CalcExpression",
        key: "-default-key-CalcExpression",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "CalcExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.CalcExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [
            "InputFieldReference",
            "LiteralExpression",
            "NumberLiteralExpression",
            "BinaryExpression",
            "MultiplyExpression",
            "PlusExpression",
            "MinusExpression",
            "DivideExpression",
        ],
    };

    return concept;
}

function describeLiteralExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "LiteralExpression",
        id: "-default-id-LiteralExpression",
        key: "-default-key-LiteralExpression",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "LiteralExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.LiteralExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "CalcExpression",
        subConceptNames: ["NumberLiteralExpression"],
    };

    return concept;
}

function describeNumberLiteralExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NumberLiteralExpression",
        id: "-default-id-NumberLiteralExpression",
        key: "-default-key-NumberLiteralExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "NumberLiteralExpression",
        constructor: (id?: string) => {
            return new MyLanguage.NumberLiteralExpression(id);
        },
        creator: (data: Partial<MyLanguage.NumberLiteralExpression>) => {
            return MyLanguage.NumberLiteralExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "LiteralExpression",
        subConceptNames: [],
    };
    concept.properties.set("value", {
        name: "value",
        id: "-default-id-NumberLiteralExpression-value",
        key: "-default-key-NumberLiteralExpression-value",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "primitive",
    });

    return concept;
}

function describeBinaryExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "BinaryExpression",
        id: "-default-id-BinaryExpression",
        key: "-default-key-BinaryExpression",
        isAbstract: true,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "BinaryExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.BinaryExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "CalcExpression",
        subConceptNames: ["MultiplyExpression", "PlusExpression", "MinusExpression", "DivideExpression"],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-default-id-BinaryExpression-left",
        key: "-default-key-BinaryExpression-left",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-default-id-BinaryExpression-right",
        key: "-default-key-BinaryExpression-right",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return concept;
}

function describeMultiplyExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "MultiplyExpression",
        id: "-default-id-MultiplyExpression",
        key: "-default-key-MultiplyExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "MultiplyExpression",
        constructor: (id?: string) => {
            return new MyLanguage.MultiplyExpression(id);
        },
        creator: (data: Partial<MyLanguage.MultiplyExpression>) => {
            return MyLanguage.MultiplyExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-default-id-BinaryExpression-left",
        key: "-default-key-BinaryExpression-left",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-default-id-BinaryExpression-right",
        key: "-default-key-BinaryExpression-right",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return concept;
}

function describePlusExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PlusExpression",
        id: "-default-id-PlusExpression",
        key: "-default-key-PlusExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "PlusExpression",
        constructor: (id?: string) => {
            return new MyLanguage.PlusExpression(id);
        },
        creator: (data: Partial<MyLanguage.PlusExpression>) => {
            return MyLanguage.PlusExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-default-id-BinaryExpression-left",
        key: "-default-key-BinaryExpression-left",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-default-id-BinaryExpression-right",
        key: "-default-key-BinaryExpression-right",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return concept;
}

function describeMinusExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "MinusExpression",
        id: "-default-id-MinusExpression",
        key: "-default-key-MinusExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "MinusExpression",
        constructor: (id?: string) => {
            return new MyLanguage.MinusExpression(id);
        },
        creator: (data: Partial<MyLanguage.MinusExpression>) => {
            return MyLanguage.MinusExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-default-id-BinaryExpression-left",
        key: "-default-key-BinaryExpression-left",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-default-id-BinaryExpression-right",
        key: "-default-key-BinaryExpression-right",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return concept;
}

function describeDivideExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "DivideExpression",
        id: "-default-id-DivideExpression",
        key: "-default-key-DivideExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-calculator",
        isNamedElement: false,
        trigger: "DivideExpression",
        constructor: (id?: string) => {
            return new MyLanguage.DivideExpression(id);
        },
        creator: (data: Partial<MyLanguage.DivideExpression>) => {
            return MyLanguage.DivideExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-default-id-BinaryExpression-left",
        key: "-default-key-BinaryExpression-left",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-default-id-BinaryExpression-right",
        key: "-default-key-BinaryExpression-right",
        type: "CalcExpression",
        isList: false,
        isPublic: true,
        language: "-default-key-calculator",
        propertyKind: "part",
    });

    return concept;
}

function describeINamedConcept(): FreLanguageInterface {
    const intface: FreLanguageInterface = {
        typeName: "INamedConcept",
        id: "-default-id-INamedConcept",
        key: "-default-key-INamedConcept",
        isPublic: true,
        isNamedElement: true,
        properties: new Map<string, FreLanguageProperty>(),
        constructor: undefined,
        creator: undefined,
        language: "calculator",
        subConceptNames: ["InputField"],
    };
    intface.properties.set("name", {
        name: "name",
        id: "-default-id-INamedConcept-name",
        key: "-default-key-INamedConcept-name",
        type: "string",
        isList: false,
        isPublic: true,
        language: "calculator",
        propertyKind: "primitive",
    });

    return intface;
}
