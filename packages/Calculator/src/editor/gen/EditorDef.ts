// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration";
import {
    InputField,
    OutputField,
    InputFieldReference,
    NumberLiteralExpression,
    MultiplyExpression,
    PlusExpression,
    MinusExpression,
    DivideExpression,
} from "../../language/gen";
import {
    InputFieldBoxProvider,
    OutputFieldBoxProvider,
    InputFieldReferenceBoxProvider,
    NumberLiteralExpressionBoxProvider,
    MultiplyExpressionBoxProvider,
    PlusExpressionBoxProvider,
    MinusExpressionBoxProvider,
    DivideExpressionBoxProvider,
    CalculatorBoxProvider,
} from "../../editor/gen";

const map = new Map([
    // the main map
    [
        // Concept has special projection for (one of) its parts
        "InputField",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "OutputField",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["expression", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "InputFieldReference",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["field", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "NumberLiteralExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Calculator",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["inputFields", ""], // special projection
                    ["outputFields", ""], // special projection
                ]),
            ],
        ]),
    ],
]);

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    handler.addProjection("Brackets");

    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "InputField",
                () => {
                    return new InputFieldBoxProvider(handler);
                },
            ],
            [
                "OutputField",
                () => {
                    return new OutputFieldBoxProvider(handler);
                },
            ],
            [
                "InputFieldReference",
                () => {
                    return new InputFieldReferenceBoxProvider(handler);
                },
            ],
            [
                "NumberLiteralExpression",
                () => {
                    return new NumberLiteralExpressionBoxProvider(handler);
                },
            ],
            [
                "MultiplyExpression",
                () => {
                    return new MultiplyExpressionBoxProvider(handler);
                },
            ],
            [
                "PlusExpression",
                () => {
                    return new PlusExpressionBoxProvider(handler);
                },
            ],
            [
                "MinusExpression",
                () => {
                    return new MinusExpressionBoxProvider(handler);
                },
            ],
            [
                "DivideExpression",
                () => {
                    return new DivideExpressionBoxProvider(handler);
                },
            ],
            [
                "Calculator",
                () => {
                    return new CalculatorBoxProvider(handler);
                },
            ],
        ]),
    );
    handler.initTableHeaders([]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("InputField").trigger = "InputField";
    FreLanguage.getInstance().concept("OutputField").trigger = "OutputField";
    FreLanguage.getInstance().concept("InputFieldReference").trigger = "InputFieldReference";
    FreLanguage.getInstance().concept("NumberLiteralExpression").trigger = "NumberLiteralExpression";
    FreLanguage.getInstance().concept("MultiplyExpression").trigger = "*";
    FreLanguage.getInstance().concept("PlusExpression").trigger = "+";
    FreLanguage.getInstance().concept("MinusExpression").trigger = "-";
    FreLanguage.getInstance().concept("DivideExpression").trigger = "/";

    const conceptProjectionToPropertyProjection = new Map();
}
