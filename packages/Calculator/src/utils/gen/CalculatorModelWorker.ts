// Generated by the Freon Language Generator.
import {
    BinaryExpression,
    CalcExpression,
    Calculator,
    CalculatorModel,
    DivideExpression,
    InputField,
    InputFieldReference,
    LiteralExpression,
    MinusExpression,
    MultiplyExpression,
    NumberLiteralExpression,
    OutputField,
    PlusExpression,
} from "../../language/gen";

/**
 * Interface CalculatorModelWorker implements the extended visitor pattern of instances of language CalculatorModel.
 * Class CalculatorModelWalker implements the traversal of the model tree, classes that implement this interface
 * are responsible for the actual work being done on the nodes of the tree.
 * Every node is visited twice, once before the visit of its children, and once after this visit.
 */
export interface CalculatorModelWorker {
    execBeforeCalculatorModel(modelelement: CalculatorModel): boolean;
    execAfterCalculatorModel(modelelement: CalculatorModel): boolean;

    execBeforeCalculator(modelelement: Calculator): boolean;
    execAfterCalculator(modelelement: Calculator): boolean;

    execBeforeInputField(modelelement: InputField): boolean;
    execAfterInputField(modelelement: InputField): boolean;

    execBeforeOutputField(modelelement: OutputField): boolean;
    execAfterOutputField(modelelement: OutputField): boolean;

    execBeforeInputFieldReference(modelelement: InputFieldReference): boolean;
    execAfterInputFieldReference(modelelement: InputFieldReference): boolean;

    execBeforeCalcExpression(modelelement: CalcExpression): boolean;
    execAfterCalcExpression(modelelement: CalcExpression): boolean;

    execBeforeLiteralExpression(modelelement: LiteralExpression): boolean;
    execAfterLiteralExpression(modelelement: LiteralExpression): boolean;

    execBeforeNumberLiteralExpression(modelelement: NumberLiteralExpression): boolean;
    execAfterNumberLiteralExpression(modelelement: NumberLiteralExpression): boolean;

    execBeforeBinaryExpression(modelelement: BinaryExpression): boolean;
    execAfterBinaryExpression(modelelement: BinaryExpression): boolean;

    execBeforeMultiplyExpression(modelelement: MultiplyExpression): boolean;
    execAfterMultiplyExpression(modelelement: MultiplyExpression): boolean;

    execBeforePlusExpression(modelelement: PlusExpression): boolean;
    execAfterPlusExpression(modelelement: PlusExpression): boolean;

    execBeforeMinusExpression(modelelement: MinusExpression): boolean;
    execAfterMinusExpression(modelelement: MinusExpression): boolean;

    execBeforeDivideExpression(modelelement: DivideExpression): boolean;
    execAfterDivideExpression(modelelement: DivideExpression): boolean;
}
