// Generated by the Freon Language Generator.
// Generated my Freon, will be overwritten with every generation.
import { InterpreterContext, RtObject, RtError } from "@freon4dsl/core";
import {
    InputField,
    OutputField,
    InputFieldReference,
    CalcExpression,
    LiteralExpression,
    NumberLiteralExpression,
    BinaryExpression,
    MultiplyExpression,
    PlusExpression,
    MinusExpression,
    DivideExpression,
    Calculator,
} from "../../language/gen";

/**
 * The base class containing all interpreter functions that should be defined.
 * All functions throw an error when called.
 */
export class CalculatorModelInterpreterBase {
    constructor() {}

    evalInputField(node: InputField, ctx: InterpreterContext): RtObject {
        throw new RtError("evalInputField is not defined");
    }

    evalOutputField(node: OutputField, ctx: InterpreterContext): RtObject {
        throw new RtError("evalOutputField is not defined");
    }

    evalInputFieldReference(node: InputFieldReference, ctx: InterpreterContext): RtObject {
        throw new RtError("evalInputFieldReference is not defined");
    }

    evalCalcExpression(node: CalcExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalCalcExpression is not defined");
    }

    evalLiteralExpression(node: LiteralExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalLiteralExpression is not defined");
    }

    evalNumberLiteralExpression(node: NumberLiteralExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalNumberLiteralExpression is not defined");
    }

    evalBinaryExpression(node: BinaryExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalBinaryExpression is not defined");
    }

    evalMultiplyExpression(node: MultiplyExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalMultiplyExpression is not defined");
    }

    evalPlusExpression(node: PlusExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPlusExpression is not defined");
    }

    evalMinusExpression(node: MinusExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalMinusExpression is not defined");
    }

    evalDivideExpression(node: DivideExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalDivideExpression is not defined");
    }

    evalCalculator(node: Calculator, ctx: InterpreterContext): RtObject {
        throw new RtError("evalCalculator is not defined");
    }
}
