// Generated by the Freon Language Generator.
import { FreReader, FreModelUnit } from "@freon4dsl/core";
import * as AGL from "net.akehurst.language-agl-processor";
import { Calculator, CalculatorModel } from "../../language/gen";
import { CalculatorModelGrammarStr } from "./CalculatorModelGrammar";
import { CalculatorModelSyntaxAnalyser } from "./CalculatorModelSyntaxAnalyser";
import { CalculatorModelSemanticAnalyser } from "./CalculatorModelSemanticAnalyser";

/**
 *   Class CalculatorModelModelUnitReader is a wrapper for the various parsers of
 *   modelunits.
 */
export class CalculatorModelModelUnitReader implements FreReader {
    analyser: CalculatorModelSyntaxAnalyser = new CalculatorModelSyntaxAnalyser();
    parser: AGL.LanguageProcessor<Calculator, AGL.ContextSimple> = AGL.Agl.getInstance().processorFromString(CalculatorModelGrammarStr, this.analyser, null);

    /**
     * Parses and performs a syntax analysis on 'sentence', using the parser and analyser
     * for 'metatype', if available. If 'sentence' is correct, a model unit will be created,
     * otherwise an error wil be thrown containing the parse or analysis error.
     * @param sentence      the input string which will be parsed
     * @param metatype      the type of the unit to be created
     * @param model         the model to which the unit will be added
     * @param sourceName    the (optional) name of the source that contains 'sentence'
     */
    readFromString(sentence: string, metatype: string, model: CalculatorModel, sourceName?: string): FreModelUnit {
        this.analyser.sourceName = sourceName;
        let startRule: string = "";
        // choose the correct parser
        if (metatype === "Calculator") {
            startRule = "Calculator";
        }

        // parse the input
        let unit: FreModelUnit = null;
        if (this.parser) {
            try {
                let asm;
                if (startRule.length > 0) {
                    asm = this.parser.processForGoal(null, startRule, sentence, AGL.AutomatonKind_api.getInstance().LOOKAHEAD_1);
                } else {
                    asm = this.parser.process(sentence, AGL.AutomatonKind_api.getInstance().LOOKAHEAD_1);
                }
                unit = asm as FreModelUnit;
            } catch (e) {
                // strip the error message, otherwise it's too long for the webapp
                let mess = e.message.replace("Could not match goal,", "Parse error in " + sourceName + ":");
                if (!!mess && mess.length > 0) {
                    console.log(mess);
                    throw new Error(mess);
                } else {
                    throw e;
                }
            }
            // do semantic analysis taking into account the whole model, because references could be pointing anywhere
            if (!!model) {
                try {
                    if (model.getUnits().filter((existing) => existing.name === unit.name).length > 0) {
                        throw new Error(`Unit named '${unit.name}' already exists.`);
                    } else {
                        model.addUnit(unit);
                        const semAnalyser = new CalculatorModelSemanticAnalyser();
                        semAnalyser.correct(unit);
                    }
                } catch (e) {
                    console.log(e.message);
                    throw e;
                }
            }
        } else {
            throw new Error(`No parser for ${metatype} available: grammar incorrect.`);
        }
        return unit;
    }
}
