// Generated by the Freon Language Generator.
import { InputFieldReference, InputField } from "../../language/gen";
import { CalculatorModelWorker, CalculatorModelDefaultWorker } from "../../utils/gen";
import { FreNamedNode, FreLanguage, FreLanguageEnvironment, FreNodeReference, FreNode } from "@freon4dsl/core";

export class CalculatorModelSemanticAnalysisWalker extends CalculatorModelDefaultWorker implements CalculatorModelWorker {
    changesToBeMade: Map<FreNode, FreNode> = null;

    constructor(changesToBeMade: Map<FreNode, FreNode>) {
        super();
        this.changesToBeMade = changesToBeMade;
    }

    /**
     * Test whether the references in 'modelelement' are correct.
     * If not, find possible replacements.
     * @param modelelement
     */
    public execBeforeInputFieldReference(modelelement: InputFieldReference): boolean {
        let referredElem: FreNodeReference<FreNamedNode>;
        referredElem = modelelement.field;
        if (!!modelelement.field && modelelement.field.referred === null) {
            // cannot find a 'field' with this name
            this.findReplacement(modelelement, referredElem);
        }
        return false;
    }

    private findReplacement(modelelement: FreNode, referredElem: FreNodeReference<FreNamedNode>) {
        const scoper = FreLanguageEnvironment.getInstance().scoper;
        const possibles = scoper.getVisibleElements(modelelement).filter((elem) => elem.name === referredElem.name);
        if (possibles.length > 0) {
            // element probably refers to something with another type
            let replacement: FreNode = null;
            for (const elem of possibles) {
                const metatype = elem.freLanguageConcept();
                if (FreLanguage.getInstance().metaConformsToType(elem, "InputField")) {
                    replacement = InputFieldReference.create({ field: FreNodeReference.create<InputField>(referredElem.name, metatype) });
                } else {
                    throw new Error(
                        "Semantic analysis error: cannot replace reference: " + referredElem.name + " of type " + metatype + ".",
                    );
                }
            }
            this.changesToBeMade.set(modelelement, replacement);
        } else {
            // true error, or boolean "true" or "false"
        }
    }
}
